{"version":3,"sources":["../src/errorHandler.ts","../src/ApiError.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { ZodError } from 'zod';\nimport { fromZodError } from 'zod-validation-error';\n\nimport { ApiError } from './ApiError';\nimport ServerLogger from '@smooai/logger/AwsLambdaLogger';\nconst logger = new ServerLogger();\n\nexport async function errorHandler<T extends any[] = any[], R = any>(\n    handler: (...args: T) => Promise<R | PromiseSettledResult<R>[]>,\n    ...args: T\n): Promise<R | PromiseSettledResult<R>[]> {\n    try {\n        return await handler(...args);\n    } catch (error) {\n        if (error instanceof ApiError) {\n            logger.error(error, `An API error occurred: Status: ${error.status} (${error.statusText}); Message: ${error.message}`);\n            throw error;\n        } else if (error instanceof ZodError) {\n            const validationError = fromZodError(error);\n            logger.error(error, `A validation error occurred: ${validationError.toString()}`);\n            throw error;\n        } else if (error instanceof Error) {\n            logger.error(error, `An unexpected error occurred: ${error.message}`);\n            throw error;\n        } else {\n            logger.error(error, `An unexpected error occurred: ${error}`);\n            throw error;\n        }\n    }\n}\n","import { getReasonPhrase, StatusCodes } from 'http-status-codes';\n\nexport class ApiError extends Error {\n    constructor(\n        public status: StatusCodes,\n        message: string,\n        public statusText?: string,\n    ) {\n        super(message);\n    }\n\n    public static throw(status: StatusCodes, message: string, statusText?: string) {\n        throw new ApiError(status, message, statusText || getReasonPhrase(status));\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,iBAAyB;AACzB,kCAA6B;;;ACF7B,+BAA6C;AAEtC,IAAM,WAAN,MAAM,kBAAiB,MAAM;AAAA,EAChC,YACW,QACP,SACO,YACT;AACE,UAAM,OAAO;AAJN;AAEA;AAAA,EAGX;AAAA,EAEA,OAAc,MAAM,QAAqB,SAAiB,YAAqB;AAC3E,UAAM,IAAI,UAAS,QAAQ,SAAS,kBAAc,0CAAgB,MAAM,CAAC;AAAA,EAC7E;AACJ;;;ADTA,6BAAyB;AACzB,IAAM,SAAS,IAAI,uBAAAA,QAAa;AAEhC,eAAsB,aAClB,YACG,MACmC;AACtC,MAAI;AACA,WAAO,MAAM,QAAQ,GAAG,IAAI;AAAA,EAChC,SAAS,OAAO;AACZ,QAAI,iBAAiB,UAAU;AAC3B,aAAO,MAAM,OAAO,kCAAkC,MAAM,MAAM,KAAK,MAAM,UAAU,eAAe,MAAM,OAAO,EAAE;AACrH,YAAM;AAAA,IACV,WAAW,iBAAiB,qBAAU;AAClC,YAAM,sBAAkB,0CAAa,KAAK;AAC1C,aAAO,MAAM,OAAO,gCAAgC,gBAAgB,SAAS,CAAC,EAAE;AAChF,YAAM;AAAA,IACV,WAAW,iBAAiB,OAAO;AAC/B,aAAO,MAAM,OAAO,iCAAiC,MAAM,OAAO,EAAE;AACpE,YAAM;AAAA,IACV,OAAO;AACH,aAAO,MAAM,OAAO,iCAAiC,KAAK,EAAE;AAC5D,YAAM;AAAA,IACV;AAAA,EACJ;AACJ;","names":["ServerLogger"]}